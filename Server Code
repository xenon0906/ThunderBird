#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_CLIENTS 10

int main() {
    int serverSocket, clientSockets[MAX_CLIENTS], maxClients = MAX_CLIENTS;
    struct sockaddr_in serverAddr, clientAddr;
    char buffer[1024];

    // Create server socket
    if ((serverSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set up server address struct
    memset(&serverAddr, '\0', sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);

    // Bind the socket to the specified address and port
    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Binding failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(serverSocket, maxClients) == -1) {
        perror("Listening failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    fd_set readSet;
    int maxFd, activity, i, valread;

    for (i = 0; i < maxClients; i++) {
        clientSockets[i] = 0;
    }

    while (1) {
        FD_ZERO(&readSet);
        FD_SET(serverSocket, &readSet);
        maxFd = serverSocket;

        for (i = 0; i < maxClients; i++) {
            if (clientSockets[i] > 0) {
                FD_SET(clientSockets[i], &readSet);
            }

            if (clientSockets[i] > maxFd) {
                maxFd = clientSockets[i];
            }
        }

        // Wait for activity on any of the sockets
        activity = select(maxFd + 1, &readSet, NULL, NULL, NULL);

        if ((activity < 0) && (errno != EINTR)) {
            perror("Select error");
        }

        // Handle incoming connection
        if (FD_ISSET(serverSocket, &readSet)) {
            int newSocket;
            socklen_t addrLen = sizeof(clientAddr);

            if ((newSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addrLen)) == -1) {
                perror("Acceptance failed");
                exit(EXIT_FAILURE);
            }

            printf("New connection, socket fd is %d, ip is : %s, port : %d\n",
                   newSocket, inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port));

            // Add new socket to array of client sockets
            for (i = 0; i < maxClients; i++) {
                if (clientSockets[i] == 0) {
                    clientSockets[i] = newSocket;
                    break;
                }
            }
        }

        // Handle data from clients
        for (i = 0; i < maxClients; i++) {
            if (FD_ISSET(clientSockets[i], &readSet)) {
                if ((valread = read(clientSockets[i], buffer, 1024)) == 0) {
                    // Client disconnected
                    getpeername(clientSockets[i], (struct sockaddr *)&clientAddr, &addrLen);
                    printf("Host disconnected, ip %s, port %d \n",
                           inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port));

                    close(clientSockets[i]);
                    clientSockets[i] = 0;
                } else {
                    // Broadcast the message to all other clients
                    for (int j = 0; j < maxClients; j++) {
                        if (clientSockets[j] != 0 && clientSockets[j] != clientSockets[i]) {
                            send(clientSockets[j], buffer, valread, 0);
                        }
                    }
                }
            }
        }
    }

    return 0;
}
